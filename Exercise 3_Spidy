class Spidy {
  //constructor
  Spidy(){
  x = width/2 ; y = height/2; d2 = 200;
  vx = random(-5,5); vy = random(-5,5);
}
  Spidy(float p, float q){ 
  x = p; y = q; d2 = 200; vx = random(-5,5); vy = random(-5,5);
}
  Spidy(float p,float q, float u){
  x = p ; y = q ; d2 = u; vx = random(-5,5); vy = random(-5,5);
}
  
  // member data
  float x, y, d2, vx, vy;
  
  // member function
  void act() { 
    x += vx; y += vy;
    if(x<0) vx = random(3,5);
    if(x>width) vx = random(-5,-3);
    if(y<0) vy = random(3,5);
    if(y>height) vy = random(-5,-3);
  }
  
  void display(){
  fill(177, 19, 19);
  circle(x, y, d2);
  line(x-d2/2, y, x+d2/2, y);
  line(x, y-d2/2, x, y+d2/2);
  line(x-d2*0.4, y+d2*0.3, x+d2*0.4, y-d2*0.3); 
  line(x-d2*0.4, y-d2*0.3, x+d2*0.4, y+d2*0.3); 

  arc(x - 0.1*d2, y - 0.15*d2, d2*0.2, d2*0.15, 0, PI / 2); 
  arc(x - 0.1*d2, y + 0.15*d2, d2*0.2, d2*0.15, 3 * PI / 2, 2 * PI);
  arc(x + 0.1*d2, y - 0.15*d2, d2*0.2, d2*0.15, PI / 2, PI);
  arc(x + 0.1*d2, y + 0.15*d2, d2*0.2, d2*0.15, PI, 3 * PI / 2);

  arc(x - 0.26*d2, y - 0.35*d2, d2*0.52, d2*0.31, 0, PI / 2);
  arc(x - 0.26*d2, y + 0.35*d2, d2*0.52, d2*0.31, 3 * PI / 2, 2 * PI);
  arc(x + 0.26*d2, y - 0.35*d2, d2*0.52, d2*0.31, PI / 2, PI);
  arc(x + 0.26*d2, y + 0.35*d2, d2*0.52, d2*0.31, PI, 3 * PI / 2);

  arc(x - 0.15*d2, y - 0.075*d2, 0.1*d2, 0.15*d2, 0, PI / 2);
  arc(x - 0.15*d2, y + 0.075*d2, 0.1*d2, 0.15*d2, 3 * PI / 2, 2 * PI);
  arc(x + 0.15*d2, y - 0.075*d2, 0.1*d2, 0.15*d2, PI / 2, PI);
  arc(x + 0.15*d2, y + 0.075*d2, 0.1*d2, 0.15*d2, PI, 3 * PI / 2);

  arc(x - 0.35*d2, y - 0.195*d2, 0.18*d2, 0.39*d2, 0, PI / 2);
  arc(x - 0.35*d2, y + 0.195*d2, 0.18*d2, 0.39*d2, 3 * PI / 2, 2 * PI);
  arc(x + 0.35*d2, y - 0.195*d2, 0.18*d2, 0.39*d2, PI / 2, PI);
  arc(x + 0.35*d2, y + 0.195*d2, 0.18*d2, 0.39*d2, PI, 3 * PI / 2);
}
void collision(Dooly dd){
    float dx = x - dd.x;
    float dy = y - dd.y;
    float temp;
    if(dx*dx+dy*dy < d2*d2/2){
      temp = vx;
      vx = dd.vx;
      dd.vx = temp;
      temp = vy;
      vy = dd.vy;
      dd.vy = temp;
}
}

void collision(Cutecat ee){
    float dx = x - ee.x;
    float dy = y - ee.y;
    float temp;
    if(dx*dx+dy*dy < d2*d2){
      temp = vx;
      vx = ee.vx;
      ee.vx = temp;
      temp = vy;
      vy = ee.vy;
      ee.vy = temp;
}
}
}
